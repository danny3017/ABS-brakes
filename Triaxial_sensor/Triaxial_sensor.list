				;file D:\IIIT\Documents\HTK_Project\Triaxial_sensor\SourceCode.c
				;1	#include <HT66F70A.h>
				;2	
				;3	#define	DATA_BUS _pg
				;4	#define RS  _ph0
				;5	#define RW  _ph1
				;6	#define EN  _ph2
				;7	
				;8	#define SDO _pa5	//以盛群為基準
				;9	#define SDA _pa6	//以盛群為基準
				;10	#define SCK _pa7
				;11	#define CS  _pb5
				;12	
				;13	#define SDOC _pac5	//以盛群為基準
				;14	#define SDAC _pac6
				;15	#define SCKC _pac7
				;16	#define CSC  _pbc5
				;17	
				;18	#define SDOPU _papu5	//盛群為基準
				;19	#define SDAPU _papu6
				;20	#define SCKPU _papu7
				;21	#define CSPU  _pbpu5
				;22	
				;23	#define PAS2 _pas2	//pas 5 SDO
				;24	#define PAS3 _pas3	//pas 6 7 SDI SCL
				;25	#define PBS2 _pbs2	//pbs5 scs
				;26	
				;27	void Delay100us(short);	
				;28	void _SPI_CS(unsigned short);
				;29	void _SPI_SCL(unsigned short);
				;30	unsigned char ADXL345_SPI_Read(unsigned char);
				;31	void delay_ms(unsigned char);
				;32	void ADXL345_SPI_Write(unsigned char , unsigned char);
				;33	void LCD_Cmd(unsigned char data);
				;34	void LCD_Senddata(unsigned char data);
				;35	void LCD_Reset(void);
				;36	void PinSet(void);
				;37	void DataFormat(void);
				;38	void PrintLCD(unsigned char);
				;39	volatile unsigned char datax;
				;40	
				;41	void main()
				;42	{
				@code .SECTION 'CODE'
				include HT66F70A.inc
0000	1F0B	clr     BP
0001	2802	jmp     _main_startup1
				@start .SECTION 'CODE'
				_main_startup1:
				@start .SECTION 'CODE'
0002	0F00	mov     a, 0H
0003	008B	mov     BP, a
0004	28D0	jmp     _main
0005	0000	nop
0006	0000	nop
0007	0000	nop
0008	0000	nop
				L0009:
0009	0000	nop
				L000A:
000A	0000	nop
000B	1785	sdz     ACC
000C	280A	jmp     L000A
				L000D:
000D	0000	nop
000E	1785	sdz     ACC
000F	280D	jmp     L000D
0010	5781	sdz     Address
0011	280D	jmp     L000D
0012	0003	ret
				;43		PinSet();	//腳位設定
				_main:
				_main:
00D0	20A8	call    _PinSet
				;44		delay_ms(2);
00D1	0F02	mov     a, 2H
00D2	2013	call    _delay_ms
				;45		//DataFormat();	//3軸資料格式設定
				;46		
				;47		LCD_Reset();		//LCD重置
00D3	209D	call    _LCD_Reset
				;48		delay_ms(250);		//延遲20毫秒 				
00D4	0FFA	mov     a, FAH
00D5	2013	call    _delay_ms
				;49		LCD_Cmd(0xc0);  	//LCD第一行顯示
00D6	0FC0	mov     a, C0H
00D7	2092	call    _LCD_Cmd
				;50		delay_ms(250);            
00D8	0FFA	mov     a, FAH
00D9	2013	call    _delay_ms
				;51		
				;52		while(1)
				;53		{
				;54			
				;55			datax = ADXL345_SPI_Read(0x2C);
				_L30:
00DA	0F2C	mov     a, 2CH
00DB	207F	call    _ADXL345_SPI_Read
00DC	4080	mov     ra, a
00DD	4700	mov     a, ra
00DE	4087	mov     datax[0], a
				;56			LCD_Cmd(0x80);
00DF	0F80	mov     a, 80H
00E0	2092	call    _LCD_Cmd
				;57			PrintLCD(datax);
00E1	4707	mov     a, datax[0]
00E2	4080	mov     ra, a
00E3	4700	mov     a, ra
00E4	2048	call    _PrintLCD
				;58			
				;59			_wdtc = 0xa8;	
00E5	0FA8	mov     a, A8H
00E6	00BE	mov     WDTC, a
00E7	28DA	jmp     _L30
00E8	28E8	jmp     $
				;60		}
				;61		
				;62	}
				;63	
				;64	//////////////////////////////
				;65	///腳位設定涵式
				;66	//////////////////////////////
				;67	void PinSet(void)
				;68	{
				;69		_wdtc = 0xa8;//關閉看門狗
				_PinSet:
				_PinSet:
00A8	0FA8	mov     a, A8H
00A9	00BE	mov     WDTC, a
				;70		_cp0c = 0x00;	//類比比較器功能關閉
00AA	1F46	clr     CP0C
				;71		_cp1c = 0x00;
00AB	1F47	clr     CP1C
				;72		
				;73		_scomen = 0;
00AC	367F	clr     SCOMEN
				;74		//_smod = 0xe0;//4MHz
				;75		_sdis0=0;
00AD	B64C	lclr    SDIS0
				;76		_sdis1=0;
00AF	B6CC	lclr    SDIS1
				;77		_simc0=0x00;
00B1	1F6C	clr     SIMC0
				;78		_simc2=0x0C;
00B2	0F0C	mov     a, CH
00B3	00EF	mov     SIMC2, a
				;79		_simen=1;  
00B4	30EC	set     SIMEN
				;80		
				;81		_adoff=1;
00B5	32E8	set     ADOFF
				;82		PAS2=0x10;  //設定各個腳位功能
00B6	0F10	mov     a, 10H
00B7	80E2	lmov    PAS2, a
				;83		PAS3=0x22;  
00B9	0F22	mov     a, 22H
00BA	80E3	lmov    PAS3, a
				;84		PBS2=0x10;
00BC	0F10	mov     a, 10H
00BD	80E6	lmov    PBS2, a
				;85	
				;86		
				;87		_ifs4=0;
00BF	9F4C	lclr    IFS4
				;88		
				;89		SDOC=0; 	SDAC=1; 	SCKC=0;		CSC=0;		//設定I/O
00C1	3693	clr     PAC5
00C2	3313	set     PAC6
00C3	3793	clr     PAC7
00C4	3697	clr     PBC5
				;90		_phc0 = 0; 	_phc1 = 0;	_phc2 = 0; 	_pgc = 0x00;   //設置PH0、PH1、PH2為輸出   
00C5	342F	clr     PHC0
00C6	34AF	clr     PHC1
00C7	352F	clr     PHC2
00C8	1F2B	clr     PGC
				;91		SDAPU=1;	SDOPU=1;	SCKPU=1;	CSPU=1;				
00C9	3311	set     PAPU6
00CA	3291	set     PAPU5
00CB	3391	set     PAPU7
00CC	3295	set     PBPU5
				;92		SCK=1;		CS=1;		//數據初始
00CD	3392	set     PA7
00CE	3296	set     PB5
00CF	0003	ret
				;93	}
				;94	
				;95	
				;96	//////////////////////////////
				;97	///SPI讀取涵式
				;98	//////////////////////////////
				;99	unsigned char ADXL345_SPI_Read(unsigned char Address)
				;100	{
				_ADXL345_SPI_Read:
				_ADXL345_SPI_Read:
007F	4081	mov     Address[0], a
				;101	  unsigned char TempSend;
				;102	  unsigned char TempRead;
				;103	  do{
				;104	  	_wcol=0;
				L0080:
0080	34EF	clr     WCOL
				;105	  	TempSend = Address|0x80;
				;106	  	_simd = TempSend;
0081	4701	mov     a, Address[0]
0082	4080	mov     ra, a
0083	7380	set     ra.7
0084	4700	mov     a, ra
0085	00EE	mov     SIMD, a
				;107	  }while(_wcol == 1);
0086	3CEF	sz      WCOL
0087	2880	jmp     L0080
				;108	  while(_trf == 0){
				L0088:
0088	3C6F	sz      TRF
0089	288D	jmp     L008D
				;109	  	_wdtc = 0xa8;
008A	0FA8	mov     a, A8H
008B	00BE	mov     WDTC, a
008C	2888	jmp     L0088
				;110	  }
				;111	  _trf = 0;
				L008D:
008D	346F	clr     TRF
				;112	  TempRead = _simd;
008E	076E	mov     a, SIMD
008F	4080	mov     ra, a
				;113	  return TempRead;
				;114	}
0090	4700	mov     a, ra
0091	0003	ret
				;115	
				;116	//////////////////////////////
				;117	///資料格式涵式
				;118	//////////////////////////////
				;119	void DataFormat(void)
				;120	{
				;121		ADXL345_SPI_Write(0x31, 0x0B); //設定測量範圍&資料格式
				;122		ADXL345_SPI_Write(0x2D, 0x08); //開始測量
				;123		ADXL345_SPI_Write(0x2E, 0x80);
				;124	}
				;125	
				;126	//////////////////////////////
				;127	///LCD顯示涵式
				;128	//////////////////////////////
				;129	void PrintLCD(unsigned char data)
				;130	{
				_PrintLCD:
				_PrintLCD:
0048	4080	mov     ra, a
0049	4086	mov     data[0], a
				;131		
				;132		LCD_Senddata((data/100)%10+0x30); 
004A	5F04	clr     data[1]
004B	4700	mov     a, ra
004C	4081	mov     Address, a
004D	0F64	mov     a, 64H
004E	4082	mov     del, a
004F	202F	call    L002F
0050	4701	mov     a, Address
0051	4080	mov     ra, a
0052	5F04	clr     data[1]
0053	4700	mov     a, ra
0054	4081	mov     Address, a
0055	0F0A	mov     a, AH
0056	4082	mov     del, a
0057	202F	call    L002F
0058	4703	mov     a, data
0059	4080	mov     ra, a
005A	0F30	mov     a, 30H
005B	4380	addm    a, ra
005C	4700	mov     a, ra
005D	2024	call    _LCD_Senddata
				;133		LCD_Senddata((data/10)%10+0x30);
005E	5F04	clr     data[1]
005F	4706	mov     a, data[0]
0060	4081	mov     Address, a
0061	0F0A	mov     a, AH
0062	4082	mov     del, a
0063	202F	call    L002F
0064	4701	mov     a, Address
0065	4080	mov     ra, a
0066	5F04	clr     data[1]
0067	4700	mov     a, ra
0068	4081	mov     Address, a
0069	0F0A	mov     a, AH
006A	4082	mov     del, a
006B	202F	call    L002F
006C	4703	mov     a, data
006D	4080	mov     ra, a
006E	0F30	mov     a, 30H
006F	4380	addm    a, ra
0070	4700	mov     a, ra
0071	2024	call    _LCD_Senddata
				;134		LCD_Senddata((data/1)%10+0x30);
0072	5F04	clr     data[1]
0073	4706	mov     a, data[0]
0074	4081	mov     Address, a
0075	0F0A	mov     a, AH
0076	4082	mov     del, a
0077	202F	call    L002F
0078	4703	mov     a, data
0079	4080	mov     ra, a
007A	0F30	mov     a, 30H
007B	4380	addm    a, ra
007C	4700	mov     a, ra
007D	2024	call    _LCD_Senddata
007E	0003	ret
				;135	}
				;136	
				;137	//////////////////////////////
				;138	///Delay100us涵式
				;139	//////////////////////////////
				;140	void Delay100us(short del)						//延遲del*200指令週期
				;141	{	short i,j;									//@fSYS=8MH,延遲del*100us
				;142		for(i=0;i<del;i++)
				;143			for(j=0;j<=25;j++) GCC_NOP();
				;144	}	
				;145	
				;146	//////////////////////////////
				;147	///CS腳電位涵式
				;148	//////////////////////////////
				;149	void _SPI_CS(unsigned short isSelect)
				;150	{
				;151	    CS=isSelect;
				;152	}
				;153	
				;154	//////////////////////////////
				;155	///SCL腳電位涵式
				;156	//////////////////////////////
				;157	void _SPI_SCL(unsigned short bLevel)
				;158	{
				;159	    SCK=bLevel;
				;160	}
				;161	
				;162	//////////////////////////////
				;163	///SPI寫入涵式
				;164	//////////////////////////////
				;165	void ADXL345_SPI_Write(unsigned char Address, unsigned char WriteData)
				;166	{
				;167	  char i;
				;168	 
				;169	  _SPI_CS(0);
				;170	 
				;171	  for(i=7; i >= 0; i--)
				;172	  {
				;173	    // F-Edge
				;174	    _SPI_SCL(1);
				;175	    SDO = 0x1 & ((0x7F & Address) >> i);
				;176	    _SPI_SCL(0);
				;177	  }
				;178	 
				;179	  for(i=7; i >= 0; i--)
				;180	  {
				;181	    // F-Edge
				;182	    _SPI_SCL(1);
				;183	    SDO = 0x1 & ((WriteData) >> i);
				;184	    _SPI_SCL(0);
				;185	  }
				;186	 
				;187	  _SPI_CS(1);
				;188	}
				;189	
				;190	//---傳送命令到LCD
				;191	void LCD_Cmd(unsigned char data)
				;192	{
				_LCD_Cmd:
				_LCD_Cmd:
0092	4080	mov     ra, a
0093	4083	mov     data[0], a
				;193	    DATA_BUS = data;  //命令送到BUS
0094	4700	mov     a, ra
0095	00AA	mov     PG, a
				;194	    RS=0; RW=0; EN=1; //命令到LCD內 
0096	342E	clr     PH0
0097	34AE	clr     PH1
0098	312E	set     PH2
				;195	    delay_ms(1);
0099	0F01	mov     a, 1H
009A	2013	call    _delay_ms
				;196	    EN=0;           //禁能LCD
009B	352E	clr     PH2
009C	0003	ret
				;197	}
				;198	//---傳送資料到LCD 
				;199	void LCD_Senddata(unsigned char data)
				;200	{
				_LCD_Senddata:
				_LCD_Senddata:
0024	4080	mov     ra, a
0025	4083	mov     data[0], a
				;201	    DATA_BUS = data;  //資料送到BUS
0026	4700	mov     a, ra
0027	00AA	mov     PG, a
				;202	    RS=1; RW=0; EN=1; //資料到LCD內
0028	302E	set     PH0
0029	34AE	clr     PH1
002A	312E	set     PH2
				;203	    delay_ms(1);
002B	0F01	mov     a, 1H
002C	2013	call    _delay_ms
				;204	    EN=0;           //禁能LCD
002D	352E	clr     PH2
002E	0003	ret
				L002F:
002F	5F03	clr     data[0]
0030	0F08	mov     a, 8H
0031	4085	mov     data[2], a
				L0032:
0032	340A	clr     C
0033	5A81	rlc     Address
0034	5A83	rlc     data[0]
0035	4703	mov     a, data[0]
0036	4202	sub     a, del
0037	380A	snz     C
0038	283D	jmp     L003D
0039	4703	mov     a, data[0]
003A	4202	sub     a, del
003B	4083	mov     data[0], a
003C	5481	inc     Address
				L003D:
003D	5785	sdz     data[2]
003E	2832	jmp     L0032
003F	7C04	sz      data[1].0
0040	4183	cpl     data[0]
0041	7C04	sz      data[1].0
0042	5483	inc     data[0]
0043	7C84	sz      data[1].1
0044	4181	cpl     Address
0045	7C84	sz      data[1].1
0046	5481	inc     Address
0047	0003	ret
				;205	}
				;206	//---LCD的啟始程式  
				;207	void LCD_Reset(void)
				;208	{
				;209	    LCD_Cmd(0b00111000);//8bit傳輸,顯示2行,5*7字型
				_LCD_Reset:
				_LCD_Reset:
009D	0F38	mov     a, 38H
009E	2092	call    _LCD_Cmd
				;210	                        //bit4:DL=1,8bit傳輸,
				;211	                        //bit3:N=1,顯示2行
				;212	                        //bit2:F=0,5*7字型                        
				;213	    LCD_Cmd(0b00001100);//顯示幕ON,不顯示游標,游標不閃爍
009F	0F0C	mov     a, CH
00A0	2092	call    _LCD_Cmd
				;214	                        //bit2:D=1,顯示幕ON
				;215	                        //bit1:C=0,不顯示游標                      
				;216	    LCD_Cmd(0b00000110);//顯示完游標右移,游標移位禁能 
00A1	0F06	mov     a, 6H
00A2	2092	call    _LCD_Cmd
				;217	                        //bit1:I/D=1,顯示完游標右移
				;218	                        //bit0:S=0,游標移位禁能                                   
				;219	    LCD_Cmd(0b00000001); //清除顯示幕
00A3	0F01	mov     a, 1H
00A4	2092	call    _LCD_Cmd
				;220	    LCD_Cmd(0b00000010); //游標回原位 
00A5	0F02	mov     a, 2H
00A6	2092	call    _LCD_Cmd
00A7	0003	ret
				;221	}
				;222	
				;223	//////////////////////////////
				;224	///Delay毫秒涵式
				;225	//////////////////////////////
				;226	void delay_ms(unsigned char del)
				;227	{	
				_delay_ms:
				_delay_ms:
0013	4082	mov     del[0], a
				;228		unsigned char i;
				;229		for(i=0;i<del;i++) GCC_DELAY(2000);		//內建函式，延遲2000指令週期
0014	5F00	clr     ra
0015	281F	jmp     L001F
				L0016:
0016	0F01	mov     a, 1H
0017	4081	mov     Address, a
0018	0FF1	mov     a, F1H
0019	340B	clr     BP0
001A	348B	clr     BP1
001B	2009	call    L0009
001C	340B	clr     BP0
001D	348B	clr     BP1
001E	5480	inc     ra
				L001F:
001F	4700	mov     a, ra
0020	4202	sub     a, del[0]
0021	390A	snz     Z
0022	2816	jmp     L0016
0023	0003	ret
				;230	}
				data .SECTION 'DATA'
				__papu DB DUP (?) ; __papu
				__pa DB DUP (?) ; __pa
				__pac DB DUP (?) ; __pac
				__pbpu DB DUP (?) ; __pbpu
				__pb DB DUP (?) ; __pb
				__pbc DB DUP (?) ; __pbc
				__pg DB DUP (?) ; __pg
				__pgc DB DUP (?) ; __pgc
				__ph DB DUP (?) ; __ph
				__phc DB DUP (?) ; __phc
				__wdtc DB DUP (?) ; __wdtc
				__cp0c DB DUP (?) ; __cp0c
				__cp1c DB DUP (?) ; __cp1c
				__adcr0 DB DUP (?) ; __adcr0
				__simc0 DB DUP (?) ; __simc0
				__simd DB DUP (?) ; __simd
				__simc2 DB DUP (?) ; __simc2
				__scomc DB DUP (?) ; __scomc
				ra DB DUP (?)
				Address DB DUP (?) ; Address
				del DB DUP (?) ; del
				data DB DUP (?) ; data
				data DB DUP (?) ; data
				datax DB DUP (?) ; datax
				__ifs4 DB DUP (?) ; __ifs4
				__pas2 DB DUP (?) ; __pas2
				__pas3 DB DUP (?) ; __pas3
				__pbs2 DB DUP (?) ; __pbs2
